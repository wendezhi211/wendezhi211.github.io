import{_ as s,c as a,o as n,a4 as i}from"./chunks/framework.BOW58p_D.js";const p="/assets/0.XKqYsiDH.png",m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"notes/git.md","filePath":"notes/git.md"}'),e={name:"notes/git.md"},t=i('<h2 id="项目第一次连接仓库" tabindex="-1">项目第一次连接仓库 <a class="header-anchor" href="#项目第一次连接仓库" aria-label="Permalink to &quot;项目第一次连接仓库&quot;">​</a></h2><p>第1步:创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</span></span></code></pre></div><p>第2步:登陆GitHub，打开“Account settings”，“SSH Keys”页面： <img src="'+p+`" alt=""> 然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容</p><p>第3步:在.ssh目录下配置config文件,内容为:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Host github.com</span></span>
<span class="line"><span>User &#39;***@qq.com&#39;</span></span>
<span class="line"><span>Hostname ssh.github.com</span></span>
<span class="line"><span>PreferredAuthentications publickey</span></span>
<span class="line"><span>IdentityFile ~/.ssh/id_rsa</span></span>
<span class="line"><span>Port 443</span></span>
<span class="line"><span>ProxyCommand connect -H 127.0.0.1:7890 %h %p</span></span></code></pre></div><p>第4步:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>//空仓库</span></span>
<span class="line"><span>git init</span></span>
<span class="line"><span>git remote add origin git@github.com:wendezhi211/windows.git</span></span>
<span class="line"><span>git branch -M main</span></span>
<span class="line"><span>git push origin main</span></span></code></pre></div><div class="language-git vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>//非空仓库</span></span>
<span class="line"><span>git init</span></span>
<span class="line"><span>git clone &lt;远程仓库URL&gt;</span></span>
<span class="line"><span>git add &lt;文件&gt;</span></span>
<span class="line"><span>git commit -m &quot;提交信息&quot;</span></span>
<span class="line"><span>git push</span></span></code></pre></div><h2 id="解决git-push冲突" tabindex="-1">解决git push冲突 <a class="header-anchor" href="#解决git-push冲突" aria-label="Permalink to &quot;解决git push冲突&quot;">​</a></h2><p>当使用 <code>git push</code> 命令时遇到冲突时，通常是因为你试图将本地的更改推送到远程仓库时，远程仓库已经有了与你的更改冲突的提交。解决这种冲突的常用方法是：</p><ol><li><p><strong>拉取最新更改：</strong> 在处理冲突之前，首先应该拉取远程仓库的最新更改到本地。这可以通过执行以下命令实现：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git pull</span></span>
<span class="line"><span>git pull origin main</span></span>
<span class="line"><span>git pull origin main --allow-unrelated-histories</span></span></code></pre></div></li><li><p><strong>解决冲突：</strong> 在执行 <code>git pull</code> 后，可能会出现冲突，Git 会告诉你哪些文件有冲突。打开这些文件，你会看到类似如下的标记：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span></span>
<span class="line"><span>本地更改</span></span>
<span class="line"><span>=======</span></span>
<span class="line"><span>远程更改</span></span>
<span class="line"><span>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></span></code></pre></div><p>你需要手动编辑这些文件，决定保留哪些更改或者如何合并这些更改。</p></li><li><p><strong>标记冲突已解决：</strong> 在手动解决冲突后，你需要将这些文件标记为已解决冲突。这可以通过执行以下命令实现：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git add &lt;冲突文件&gt;</span></span></code></pre></div></li><li><p><strong>提交解决方案：</strong> 解决冲突后，你可以提交这些更改：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git commit -m &quot;解决冲突&quot;</span></span></code></pre></div></li><li><p><strong>推送更改：</strong> 最后，你可以再次执行 <code>git push</code> 将解决冲突后的更改推送到远程仓库：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git push</span></span></code></pre></div></li></ol><p>通过这些步骤，你应该能够成功解决 <code>git push</code> 冲突并将你的更改推送到远程仓库。</p><h2 id="gitignore" tabindex="-1">.gitignore <a class="header-anchor" href="#gitignore" aria-label="Permalink to &quot;.gitignore&quot;">​</a></h2><p>要添加Git忽略配置，你可以创建一个名为<code>.gitignore</code>的文件，并将要忽略的文件或目录添加到该文件中。当Git执行操作时，它会忽略这些文件和目录。</p><p>以下是添加Git忽略配置的步骤：</p><ol><li><p>打开你的项目目录。</p></li><li><p>创建一个名为<code>.gitignore</code>的新文件。你可以使用命令行或文件管理器来创建该文件。</p></li><li><p>在<code>.gitignore</code>文件中，每一行表示一个要忽略的文件或目录。你可以使用以下规则：</p><ul><li>要忽略特定文件，可以在文件名前面添加斜杠（/）。</li><li>要忽略特定目录，可以在目录名后面添加斜杠（/）。</li><li>使用通配符来匹配多个文件或目录。例如，<code>*.log</code>将忽略所有以<code>.log</code>结尾的文件，<code>build/</code>将忽略名为<code>build</code>的目录及其内容。</li><li>使用感叹号（!）来取消忽略。如果你在忽略某个目录，但想要包含其中的某个文件，可以在该文件前面添加感叹号。</li></ul><p>下面是一个示例<code>.gitignore</code>文件：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># 忽略所有.log文件</span></span>
<span class="line"><span>*.log</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 忽略build目录及其内容</span></span>
<span class="line"><span>build/</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 不忽略build目录下的important.log文件</span></span>
<span class="line"><span>!build/important.log</span></span></code></pre></div></li><li><p>保存并关闭<code>.gitignore</code>文件。</p></li><li><p>将<code>.gitignore</code>文件添加到Git仓库中：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .gitignore</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Add .gitignore file&quot;</span></span></code></pre></div><p>这将把<code>.gitignore</code>文件添加到Git仓库中，并创建一个新的提交。</p></li></ol><p>从现在开始，Git将忽略<code>.gitignore</code>文件中指定的文件和目录。这意味着它们不会被跟踪、提交或包含在任何Git操作中。</p><p>请注意，<code>.gitignore</code>文件是项目特定的，因此你可以在不同的项目中使用不同的<code>.gitignore</code>文件来忽略不同的文件和目录。</p>`,19),l=[t];function o(c,d,g,h,r,u){return n(),a("div",null,l)}const k=s(e,[["render",o]]);export{m as __pageData,k as default};
